/*
 * Copyright (c) 2014-2023, Inversoft Inc., All Rights Reserved
 */
savantVersion = "2.0.0-RC.6"
savantIdeaVersion = "2.0.0-RC.7"

project(group: "org.inversoft.prime", name: "prime.js", version: "1.7.0", licenses: ["ApacheV2_0"]) {
  workflow {
    fetch {
      cache()
      url(url: "https://repository.savantbuild.org")
    }
    publish {
      cache()
    }
  }

  publishWorkflow {
    subversion(repository: "https://svn.savantbuild.org")
  }

  publications {
    main {
      publication(name: "prime", type: "js", file: "build/prime-${project.version}.js", source: "build/prime-${project.version}.js")
      publication(name: "prime", type: "css", file: "build/prime-${project.version}.css", source: "build/prime-${project.version}.css")
      publication(name: "prime-min", type: "js", file: "build/prime-min-${project.version}.js", source: "build/prime-min-${project.version}.js")
      publication(name: "prime-min", type: "js.map", file: "build/prime-min-${project.version}.js.map", source: "build/prime-min-${project.version}.js.map")
      publication(name: "prime-min", type: "css", file: "build/prime-min-${project.version}.css", source: "build/prime-min-${project.version}.css")
      publication(name: "prime-min", type: "css.map", file: "build/prime-min-${project.version}.css.map", source: "build/prime-min-${project.version}.css.map")
      publication(name: "prime-es6", type: "js", file: "build/prime-es6-${project.version}.js", source: "build/prime-es6-${project.version}.js")
      publication(name: "prime-es6-min", type: "js", file: "build/prime-es6-min-${project.version}.js", source: "build/prime-es6-min-${project.version}.js")
      publication(name: "prime-es6-min", type: "js.map", file: "build/prime-es6-min-${project.version}.js.map", source: "build/prime-es6-min-${project.version}.js.map")
      publication(name: "prime-all", type: "zip", file: "build/prime-all.zip", source: "build/prime-all.zip")
    }
  }
}

// Plugins
dependency = loadPlugin(id: "org.savantbuild.plugin:dependency:${savantVersion}")
file = loadPlugin(id: "org.savantbuild.plugin:file:${savantVersion}")
idea = loadPlugin(id: "org.savantbuild.plugin:idea:${savantIdeaVersion}")
release = loadPlugin(id: "org.savantbuild.plugin:release-git:${savantVersion}")

target(name: "clean", description: "Does nothing. Exists for scripting") {
  file.prune(dir: "build")
}

target(name: "setup", description: "installs gulp") {
  def proc = "npm install -g gulp".execute()
  proc.consumeProcessOutput(System.out, System.err)
  proc.waitFor()
  proc = "npm install".execute()
  proc.consumeProcessOutput(System.out, System.err)
  proc.waitFor()
  proc = "npm i -D karma-chrome-launcher puppeteer".execute()
  proc.consumeProcessOutput(System.out, System.err)
  proc.waitFor()
}

target(name: "int", description: "Releases a local integration build of the project", dependsOn: ["test"]) {
  def which = "which gulp".execute()
  which.waitFor()
  if (which.exitValue() != 0) {
    fail ("Error. Can't build without setup. Run > sb setup")
  }

  // Add the project version to the gulp env
  def envList = []
  System.getenv().each() {k, v -> envList.push ("$k=$v")}
  envList.push( "project.version=${project.version}")
  def gulp = "gulp".execute(envList, null)
  gulp.consumeProcessOutput(System.out, System.err)
  gulp.waitFor()

  file.zip(file: "build/prime-all.zip") {
    fileSet(dir: "build", excludePatterns: [~/.+\.zip/])
  }

  dependency.integrate()
}

target(name: "test", description: "Runs tests for the project") {
  if (switches.has("skipTests")) {
    return
  }

  def success = "which gulp".execute().exitValue()
  if (success == 1) {
    println "Error. Can't test without setup. Run > sb setup"
    exit
  }

  def karma
  if (switches.has("debug")) {
    println "  > gulp test"
    karma = "gulp test".execute()
    karma.consumeProcessOutput(System.out, System.err)
  } else {
    println "  > gulp fastTest"
    karma = "gulp fastTest".execute()
  }

  karma.consumeProcessOutput(System.out, System.err)
  karma.waitFor()
  assert karma.exitValue() != 1
}

target(name: "idea", description: "Updates the IntelliJ IDEA module file") {
  idea.iml()
}

target(name: "release", description: "Releases a full version of the project", dependsOn: ["clean", "int"]) {
  release.release()
}
